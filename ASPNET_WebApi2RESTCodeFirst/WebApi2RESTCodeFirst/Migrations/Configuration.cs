namespace WebApi2RESTCodeFirst.Migrations
{
    using Models;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;

    /*
        Now goto Tools -> Nuget Package Manager and select Package Manager Console. Inside package manager console 
        dialog box execute the following command.

        Enable-Migrations

        After running this command, it adds a Migrations folder to our project. This Migrations folder contains a file:

        Configuration.cs class file : This class contains methods to configure the Database migrations. Using 
        database migrations, Entity Framework can easily use the Model classes define in the project to create 
        the database.

        The configuration.cs class contains a Seed method which is used to insert/update data during database 
        initialization process. A commented out example code snippet for Adding data is already present inside the 
        Seed method of Configuration class.

        We will be modifying the Seed method to add some test data for Product and Review entities.


        Next in the Package Manager console execute the following command:

        First,

        Add-Migration Initial
        The above command generates the code to create the Database for the Models. 

        Update-Database
        This command excutes the code generated by above "Add-Migration Initial" command and creates the database.

        By default the database is created using localDb. 

        At this point in Web.Config ConnectionStrings section the connection string points to LocalDb.

        This same connection string can be changed before executing the above commands to point to Sql Server Express 
        instance to create the Database tables in Microsoft Sql Server. 

        Now the Database is created and can be seen in the server explorer window of Visual Studio.
    */

    internal sealed class Configuration : DbMigrationsConfiguration<WebApi2RESTCodeFirst.Models.ProductReviewsContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
        }

        protected override void Seed(WebApi2RESTCodeFirst.Models.ProductReviewsContext context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data. E.g.
            //
            //    context.People.AddOrUpdate(
            //      p => p.FullName,
            //      new Person { FullName = "Andrew Peters" },
            //      new Person { FullName = "Brice Lambson" },
            //      new Person { FullName = "Rowan Miller" }
            //    );
            //

            // This uses a AddOrUpdate() which adds a new record if not present and updates an existing record if already present.
            context.Products.AddOrUpdate(p => p.ProductId,
                new Product { Name = "Product 1", Category = "Category 1", Price = 200 },
                new Product { Name = "Product 2", Category = "Category 2", Price = 500 },
                new Product { Name = "Product 3", Category = "Category 3", Price = 700 }
                );

            context.Reviews.AddOrUpdate(r => r.ReviewId,
                new Review { Title = "Review 1", Description = "Test review 1", ProductId = 1 },
                new Review { Title = "Review 2", Description = "Test review 2", ProductId = 1 }
                );
        }
    }
}
